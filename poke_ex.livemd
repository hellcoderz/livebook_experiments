<!-- livebook:{"persist_outputs":true} -->

# PokeEx

```elixir
Mix.install([
  {:req_llm, "~> 1.0.0-rc.2"},
  {:kino, "~> 0.17.0"},
  {:jido_keys, "~> 1.0"},
  {:jason, "~> 1.4"}
])
```

## Section

```elixir
ReqLLM.put_key(:google_api_key, System.fetch_env!("LB_GEMINI_API_KEY"))
model_input = Kino.Input.select("Gemini Model", 
  [{"google:gemini-2.5-flash-lite-preview-06-17", "gemini-2.5-flash-lite"}, {"google:gemini-2.5-flash", "gemini-2.5-flash"}]
)
```

```elixir
defmodule PlannerAgent do
  def plan(model, user_message) do
    system_prompt = """
You are inteligent planner agent which plans what needs to be done to provide correct response to the User. 
Do not output any other thing except the plan in the form of bulleted list.
-------------------

Examples:
User Request: summarize my emails 
Plan:
- fetch recent emails
- summarize the emails

----------
Output format:
Only respond with bulleted list of steps to take to complete the user's request.

Steps generation instructions:
- each steps should do one task only
- each step should be simple enough
- each step should clear enough
- if step is not clear add a step to ask user clarifying question to resolve the step
- anytime you want to ask user for details create a step to check their emails and personal context


User Request: <<user_msg>>
Plan: 
"""

    context = String.replace(system_prompt, "<<user_msg>>", user_message)
    ReqLLM.generate_text!(model, context, temperature: 0.1)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, PlannerAgent, <<70, 79, 82, 49, 0, 0, 10, ...>>, {:plan, 2}}
```

```elixir
queries = [
  "get my recent emails messages and summarize",
  "set alarm for 10:15 pm and 5:16 pm",
  "remind me everytime when i get an email about a job",
  "check in for my flight"
]

model = Kino.Input.read(model_input)

queries
|> Enum.map(fn query -> query <> "\n" <> PlannerAgent.plan(model, query) end)
|> Enum.join("\n-------------------\n")
|> IO.puts()
```

<!-- livebook:{"output":true} -->

```
get my recent emails messages and summarize
- fetch recent email messages
- summarize the fetched email messages
-------------------
set alarm for 10:15 pm and 5:16 pm
- set alarm for 10:15 pm
- set alarm for 5:16 pm
-------------------
remind me everytime when i get an email about a job
- access user's email account
- monitor incoming emails
- check user's personal context for keywords or senders to identify job-related emails
- if job-related email criteria are not found, ask the user for keywords or senders to identify job-related emails
- filter incoming emails based on the defined job-related criteria
- check user's personal context for preferred reminder method
- if preferred reminder method is not found, ask the user for their preferred reminder method
- send a reminder using the preferred method when a job-related email is received
-------------------
check in for my flight
- check user's calendar for flight details
- check user's emails for flight confirmation
- if flight details are not found, ask user for flight details (airline, flight number, booking reference, passenger name)
- navigate to the airline's online check-in portal
- input the flight details
- follow the online check-in process
- confirm the check-in
- retrieve the boarding pass
- send the boarding pass to the user
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
defmodule GmailCapability do

  def fetch_gmail_messages(args) do
    _query = args[:query]
    _max_count = args[:max_count]

    """
    Subject: Test Subject 1
    Body: text body 1
    Sender: xyz@gmail.com
    Date: 2025-12-12T13:45:67
    """
  end
  
  def tools do
    fetch_gmail_messages = ReqLLM.tool(
      name: "fetch_gmail_messages",
      description: "Fetch or read or retreive gmail/email messages",
      parameter_schema: [
        query: [type: :string, required: false, default: "in:inbox", 
          doc: "extract a keywords that will used to search gmail. If none present don't generate a random one."
        ],
        max_count: [type: :integer, required: false, default: 10,
          doc: "count of messages to be retreived. Extract the number if provided i user's query only."
        ]
      ],
      callback: fn args -> fetch_gmail_messages(args) end
    )

    %{
      "fetch_gmail_messages" => fetch_gmail_messages
    }
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, GmailCapability, <<70, 79, 82, 49, 0, 0, 12, ...>>, {:tools, 0}}
```

```elixir
defmodule CalendarCapability do

  def fetch_calendar_events(args) do
    _query = args[:query]
    _max_count = args[:max_count]

    """
    Title: Test Event 1
    Decription: text description 1
    Owner: xyz@gmail.com
    Created: 2025-12-12T13:45:67
    """
  end
  
  def tools do
    fetch_calendar_events = ReqLLM.tool(
      name: "fetch_calendar_events",
      description: "Fetch or read or retreive calendar events",
      parameter_schema: [
        query: [type: :string, required: false, default: "", 
          doc: "extract a keywords that will used to search calendar. If none present don't generate a random one."
        ],
        max_count: [type: :integer, required: false, default: 10,
          doc: "count of events to be retreived. Extract the number if provided i user's query only."
        ]
      ],
      callback: fn args -> fetch_calendar_events(args) end
    )

    %{
      "fetch_calendar_events" => fetch_calendar_events
    }
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, CalendarCapability, <<70, 79, 82, 49, 0, 0, 11, ...>>, {:tools, 0}}
```

```elixir
defmodule ResponseCapability do

  def generate_response(args) do
    instruction = args[:instruction]

    context = "#{instruction}"

    ReqLLM.generate_text!(
      "google:gemini-2.5-flash-lite-preview-06-17", 
      context,
      temperature: 0.2
    )
    
  end
  
  def tools do
    generate_response = ReqLLM.tool(
      name: "generate_response",
      description: "Generate response based on the context and user query for queries outside of tools capability",
      parameter_schema: [
        instruction: [type: :string, required: true,
          doc: "expand the user query into more detailed instruction if possible"
        ]
      ],
      callback: fn args -> generate_response(args) end
    )

    %{
      "generate_response" => generate_response
    }
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, ResponseCapability, <<70, 79, 82, 49, 0, 0, 11, ...>>, {:tools, 0}}
```

```elixir
defmodule ToolAgent do
  
  def run_step(model, step) do
    system_prompt = 
"""
You are a smart helpful agent to provide access to the capabilities added via tools.

Query: <<step>>
"""
    tools_map = 
      [GmailCapability.tools(), CalendarCapability.tools(), ResponseCapability.tools()]
      |> Enum.reduce(fn tmap, acc -> Map.merge(acc, tmap) end)
    
    tools = tools_map |> Enum.map(fn {_, tool} -> tool end)

    context = String.replace(system_prompt, "<<step>>", step)

    {:ok, response } = ReqLLM.generate_text(
      model, 
      context, 
      tools: tools,
      temperature: 0.1
    )

    text_response = ReqLLM.Response.text(response)
    tools_invoked = ReqLLM.Response.tool_calls(response)
    
    case length(tools_invoked) do
      0 -> text_response
      _ -> 
        tool_invoked = List.first(tools_invoked)
        tool_response = ReqLLM.Tool.execute(tools_map[tool_invoked.name], tool_invoked.arguments)
        text_response <> "\nTool Call: name=#{tool_invoked.name}\n" <> tool_response
    end

  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, ToolAgent, <<70, 79, 82, 49, 0, 0, 15, ...>>, {:run_step, 2}}
```

```elixir
steps = [
  "read my emails",
  "tell me a joke",
  "do i have any meetings today?"
]

steps
|> Enum.map(fn step -> "[step] " <> step <> "\n" <> ToolAgent.run_step(model, step) end)
|> Enum.join("\n----------------------------\n")
|> IO.puts()


```

<!-- livebook:{"output":true} -->

```
[step] read my emails

Tool Call: name=fetch_gmail_messages
Subject: Test Subject 1
Body: text body 1
Sender: xyz@gmail.com
Date: 2025-12-12T13:45:67

----------------------------
[step] tell me a joke

Tool Call: name=generate_response
Why did the scarecrow win an award?

Because he was outstanding in his field!
----------------------------
[step] do i have any meetings today?

Tool Call: name=fetch_calendar_events
Title: Test Event 1
Decription: text description 1
Owner: xyz@gmail.com
Created: 2025-12-12T13:45:67

```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
defmodule PokeAgent do
  def run(model, query) do
    plan_steps = PlannerAgent.plan(model, query)
    plan_steps = String.trim(plan_steps)
    steps = String.split(plan_steps, "\n") 
      |> Enum.map(&String.trim/1)
      |> Enum.map(fn step -> String.replace_prefix(step, "- ", "") end)

    steps
    |> Enum.map(fn step -> "[step] " <> step <> "\n" <> ToolAgent.run_step(model, step) end)
    |> Enum.join("\n----------------------------\n")
    |> IO.puts()
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, PokeAgent, <<70, 79, 82, 49, 0, 0, 10, ...>>, {:run, 2}}
```

```elixir
model 
|> PokeAgent.run("summarize my emails")
```

<!-- livebook:{"output":true} -->

```
[step] fetch recent emails

Tool Call: name=fetch_gmail_messages
Subject: Test Subject 1
Body: text body 1
Sender: xyz@gmail.com
Date: 2025-12-12T13:45:67

----------------------------
[step] summarize the emails

Tool Call: name=generate_response
You're absolutely right! My apologies. I seem to have gotten ahead of myself and assumed a capability that doesn't exist.

Thank you for the clarification. I appreciate you pointing that out.

**To be clear, I understand that you cannot summarize emails.**

Instead, I can:

*   **Fetch emails based on my query.**

**So, to reiterate, I would like to fetch emails.**

Please let me know how I can best provide you with the information you need to fetch the emails I'm looking for. For example, should I tell you:

*   **Keywords to search for?**
*   **Sender or recipient names?**
*   **Date ranges?**
*   **Subject lines?**
*   **Any other criteria?**

I'm ready to provide you with the specific details for the emails I'd like to fetch.
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
model 
|> PokeAgent.run("check in my flight")
```

<!-- livebook:{"output":true} -->

```
[step] check user's emails and personal context for flight details

Tool Call: name=fetch_gmail_messages
Subject: Test Subject 1
Body: text body 1
Sender: xyz@gmail.com
Date: 2025-12-12T13:45:67

----------------------------
[step] if flight details are not found, ask user for flight details
Okay, I understand. If I cannot find flight details, I will ask the user for them.
----------------------------
[step] navigate to the airline's check-in portal

Tool Call: name=generate_response
It sounds like you're trying to get me to do something that involves interacting with a website, like checking in or navigating to a specific page.

I understand that you're looking for help with that, but as an AI, I don't have the ability to:

*   **Browse the internet in real-time.** I can't click on links, fill out forms, or interact with dynamic web content.
*   **Open external applications or portals.** I'm a language model, not a web browser or an operating system.

**To help you, I need you to provide me with the information directly.**

For example, instead of asking me to "check in on this website," you could:

*   **Tell me what information you need to provide for the check-in.** (e.g., "I need to enter my booking number and last name.")
*   **Ask me to help you *formulate* the information you need to enter.** (e.g., "Can you help me write a polite message to customer service about a delayed flight?")
*   **Ask me to *explain* how to do something on a website, if you describe the website's layout.** (e.g., "On a website with a navigation bar at the top, where would I typically find the 'Contact Us' link?")

**Please tell me what you were trying to achieve, and I'll do my best to assist you with the information you can provide to me.**
----------------------------
[step] enter the flight details
I am sorry, I cannot fulfill this request. My current capabilities do not include entering flight details. I can only fetch calendar events, read or retrieve Gmail messages.
----------------------------
[step] complete the check-in process

Tool Call: name=generate_response
To help me complete the check-in process, please provide me with the following:

1.  **The Context:** What kind of check-in are we talking about? For example:
    *   **Hotel Check-in:** Are you checking into a hotel?
    *   **Flight Check-in:** Are you checking in for a flight?
    *   **Event Check-in:** Are you checking into an event (conference, concert, etc.)?
    *   **App/Service Check-in:** Are you checking into a specific app or online service?
    *   **Other:** Please specify.

2.  **The User Query:** What is the user trying to do or asking about regarding the check-in? For example:
    *   "I want to check in."
    *   "What information do I need to check in?"
    *   "Can you help me find my booking?"
    *   "I'm having trouble with the check-in process."
    *   "What are the check-in times?"

**Once you provide me with this information, I can guide you through the specific steps or answer your questions.**

**For example, if you said:**

*   **Context:** Hotel Check-in
*   **User Query:** "I want to check in to my room."

**I would respond with something like:**

"Great! To check you into your hotel room, I'll need a few details. Could you please provide:

*   **Your Name:**
*   **Your Booking Confirmation Number (if you have it):**
*   **The Name of the Hotel:**
*   **Your Arrival Date:**

Once I have this information, I can proceed with your check-in."
----------------------------
[step] confirm successful check-in
I am sorry, I cannot fulfill this request. I can fetch calendar events, and gmail messages. I can also generate a response based on context.
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
model 
|> PokeAgent.run("do i have emails from sam and tom today?")
```

<!-- livebook:{"output":true} -->

```
[step] check user's email

Tool Call: name=fetch_gmail_messages
Subject: Test Subject 1
Body: text body 1
Sender: xyz@gmail.com
Date: 2025-12-12T13:45:67

----------------------------
[step] filter emails by sender "sam"

Tool Call: name=fetch_gmail_messages
Subject: Test Subject 1
Body: text body 1
Sender: xyz@gmail.com
Date: 2025-12-12T13:45:67

----------------------------
[step] filter emails by sender "tom"

Tool Call: name=fetch_gmail_messages
Subject: Test Subject 1
Body: text body 1
Sender: xyz@gmail.com
Date: 2025-12-12T13:45:67

----------------------------
[step] filter emails by date "today"

Tool Call: name=fetch_gmail_messages
Subject: Test Subject 1
Body: text body 1
Sender: xyz@gmail.com
Date: 2025-12-12T13:45:67

----------------------------
[step] combine filtered emails

Tool Call: name=generate_response
You're absolutely right to ask for clarification! My apologies for the ambiguity. When I said "combine filtered emails," I was using a rather loose and potentially misleading term.

Here's what I *actually* meant, and the different operations I might have been thinking of:

**Possible Meanings of "Combine Filtered Emails" and What I Might Have Intended:**

1.  **Consolidating or Aggregating Information from Filtered Emails:**
    *   **What I might have meant:** I was looking for a way to **extract specific pieces of information** from a set of emails that have been filtered by certain criteria and then **present that information in a summarized or consolidated format.**
    *   **Example:** If I filtered emails from a specific sender about project updates, I might want to combine them to get a list of all the tasks mentioned, or a summary of the progress reported.
    *   **This is NOT about merging the actual email content into one giant email.**

2.  **Creating a New Email or Document with the Content of Filtered Emails:**
    *   **What I might have meant:** I wanted to **take the content of multiple filtered emails and put it into a single new email or document.** This could be for reporting, archiving, or sharing.
    *   **Example:** If I filtered all the meeting invitations for a particular week, I might want to combine their details (date, time, attendees, subject) into a single summary email to my team.
    *   **This is closer to "combining" but still not merging the original emails themselves.**

3.  **Archiving or Moving Filtered Emails Together:**
    *   **What I might have meant:** I wanted to **group a set of filtered emails together for organizational purposes.** This could involve moving them to a specific folder, applying a label, or archiving them as a batch.
    *   **Example:** If I filtered all emails related to a specific client, I might want to "combine" them by moving them all into a dedicated "Client X" folder.
    *   **This is a common organizational task, not a content manipulation task.**

4.  **A Misunderstanding of a Specific Tool's Functionality:**
    *   **What I might have meant:** I might have been thinking of a feature in a specific email client or third-party tool that *does* have a function that sounds like "combining" but actually performs one of the above operations. For instance, some tools might allow you to "export" or "save" multiple emails as a single file (like a PDF or a text file), which could be perceived as "combining."

**In short, I was likely looking for a way to:**

*   **Summarize or extract data from multiple emails.**
*   **Create a new output (email, document) based on the content of multiple emails.**
*   **Organize or group multiple emails together.**

**Could you tell me what you were trying to achieve with your filtered emails?** Knowing your goal will help me suggest the correct tools or methods. For example, are you trying to:

*   **Get a quick overview of information?**
*   **Create a report?**
*   **Save space or organize your inbox?**
*   **Share information with someone else?**

Thank you for pointing out my imprecise language!
----------------------------
[step] determine if any emails match the criteria
I can help determine if any emails match certain criteria. What criteria are you looking for? For example, are you searching for emails from a specific sender, with a particular subject, or containing certain keywords?
----------------------------
[step] respond to the user

Tool Call: name=generate_response
Okay, I'm ready! Please tell me what you'd like me to respond to.

To help me give you the best possible response, you can tell me:

*   **What is the topic?**
*   **What is the context?** (e.g., are you asking a question, making a statement, sharing information, asking for an opinion, etc.?)
*   **What kind of response are you looking for?** (e.g., a direct answer, an explanation, a creative story, a summary, a suggestion, etc.)

I'm looking forward to hearing from you!
```

<!-- livebook:{"output":true} -->

```
:ok
```

<!-- livebook:{"offset":19185,"stamp":{"token":"XCP.OSX9Es5fPMWP7GwWj3AIJBY-GWqI_L91a5UX8TFDhn-1zdUiWjiLzKwHQJtlmX7x4JdwB1aWb7bYis3fMiVDcnp7cZx5dhSJscMzlKzvYaMbKDat6RhhhZk","version":2}} -->
